import {AppRootStateType, AppThunkDispatch} from './store'
import {todolistAPI, TodolistType} from '../api/todolist-api'
import {RequestStatusType, setAppErrorAC, setAppStatusAC} from './app-reducer'


// –¢–∏–ø–∏–∑–∞—Ü–∏—è Actions –≤—Å–µ–≥–æ todolistsReducer
export type ToDoListActionsTypes =
    RemoveTodolistActionType |
    AddTodolistActionType |
    SetTodolistActionType |
    ReturnType<typeof changeTodolistTitleAC> |
    ReturnType<typeof changeTodolistFilterAC> |
    ReturnType<typeof changeTodolistEntityStatusAC>


export type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>
export type AddTodolistActionType = ReturnType<typeof addTodolistAC>
export type SetTodolistActionType = ReturnType<typeof setToDoListsAC>

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å action –≤ todolistsReducer
const CHANGE_TODOLIST_ENTITY_STATUS = 'todolists/CHANGE-TODOLIST-ENTITY-STATUS'


// –¢–∏–ø–∏–∑–∞—Ü–∏—è Filters
export type FilterValuesType = 'all' | 'active' | 'completed'

// –¢–∏–ø–∏–∑–∞—Ü–∏—è Todolists –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Å filter
export type ToDoListDomainType = TodolistType & {
    filter: FilterValuesType,
    entityStatus: RequestStatusType
}


// *********** –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π state –¥–ª—è todolistsReducer ****************
const initialState: ToDoListDomainType[] = []

// *********** Reducer - —á–∏—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è state –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è action –æ—Ç dispatch ****************
export const todolistsReducer = (state = initialState, action: ToDoListActionsTypes): ToDoListDomainType[] => {
    switch (action.type) {
        case 'REMOVE-TODOLIST':
            return state.filter(el => el.id !== action.payload.toDoListID)
        case 'ADD-TODOLIST':
            return [
                {
                    id: action.payload.todolistId,
                    title: action.payload.title,
                    filter: 'all',
                    addedDate: '',
                    order: 0,
                    entityStatus: 'idle'
                },
                ...state
            ]
        case 'CHANGE-TODOLIST-TITLE':
            return state.map(el => el.id === action.payload.toDoListID ? {...el, title: action.payload.title} : el)
        case 'CHANGE-TODOLIST-FILTER':
            return state.map(el => el.id === action.payload.toDoListID ? {...el, filter: action.payload.filter} : el)
        case 'SET-TODOLISTS':
            return action.payload.toDoLists.map(el => ({...el, filter: 'all', entityStatus: 'idle'}))
        case CHANGE_TODOLIST_ENTITY_STATUS:
            return state.map(el => el.id === action.payload.id ? {...el, entityStatus: action.payload.status} : el)
        default :
            return state
    }
}

// *********** Action creators - —Å–æ–∑–¥–∞—é—Ç –æ–±—ä–µ–∫—Ç action ****************
export const removeTodolistAC = (toDoListID: string) => {
    return {type: 'REMOVE-TODOLIST', payload: {toDoListID}} as const
}
export const addTodolistAC = (title: string, todolistId: string) => {
    return {type: 'ADD-TODOLIST', payload: {title, todolistId}} as const
}
export const changeTodolistTitleAC = (toDoListID: string, title: string) => {
    return {type: 'CHANGE-TODOLIST-TITLE', payload: {toDoListID, title}} as const
}
export const changeTodolistFilterAC = (toDoListID: string, filter: FilterValuesType) => {
    return {type: 'CHANGE-TODOLIST-FILTER', payload: {toDoListID, filter}} as const
}
export const setToDoListsAC = (toDoLists: Array<TodolistType>) => {
    return {type: 'SET-TODOLISTS', payload: {toDoLists}} as const
}
export const changeTodolistEntityStatusAC = (id: string, status: RequestStatusType) => {
    return {type: CHANGE_TODOLIST_ENTITY_STATUS, payload: {id, status}} as const
}

// *********** Thunk - –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å DAL ****************
// ------------- –ü–æ–ª—É—á–µ–Ω–∏–µ todolist —Å —Å–µ—Ä–≤–µ—Ä–∞ -----------------------
export const getTodoListsTC = () => async (dispatch: AppThunkDispatch) => {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º Preloader –≤–æ –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞
    dispatch(setAppStatusAC('loading'))

    // –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ todolist —Å —Å–µ—Ä–≤–µ—Ä–∞
    const getTodoListsData = await todolistAPI.getTodolists()

    // –ó–∞–¥–∏—Å–ø–∞—Ç—á–∏–ª–∏ –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
    dispatch(setToDoListsAC(getTodoListsData))

    // –£–±–∏—Ä–∞–µ–º Preloader –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    dispatch(setAppStatusAC('succeeded'))
}

// ------------- –ò–∑–º–µ–Ω–µ–Ω–∏–µ todolist's title -----------------------
export const updateTodoListsTC = (todolistId: string, title: string) =>
    async (dispatch: AppThunkDispatch, getState: () => AppRootStateType) => {

        // –ü–æ–ª—É—á–∏–ª–∏ –≤—Å–µ todolists –∏–∑ state
        const allTodoListsFromState = getState().todolists

        // –ù–∞—à–ª–∏ –Ω—É–∂–Ω—ã–π todolist –ø–æ todolistId
        const todoList = allTodoListsFromState.find(t => {
            return t.id === todolistId
        })

        // –ü—Ä–æ–≤–µ—Ä–∫–∞, —Ç.–∫ find –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å undefined
        if (todoList) {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º Preloader –≤–æ –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞
            dispatch(setAppStatusAC('loading'))

            // –ó–∞–ø—Ä–æ—Å –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ todolist's title
            const updateTodolistData = await todolistAPI.updateTodolist(todolistId, title)


            // –ï—Å–ª–∏ —É—Å–ø–µ—Ö
            if (updateTodolistData.resultCode === 0) {
                // –ó–∞–¥–∏—Å–ø–∞—Ç—á–∏–ª–∏ –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –∏ –ø–æ–º–µ–Ω—è–ª–∏ title
                dispatch(changeTodolistTitleAC(todolistId, title))

                // –£–±–∏—Ä–∞–µ–º Preloader –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
                dispatch(setAppStatusAC('updated'))
            } else {
                // –ü—Ä–æ–≤–µ—Ä–∏–ª–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
                updateTodolistData.messages.length

                    // –ó–∞–¥–∏—Å–ø–∞—Ç—á–∏–ª–∏ –æ—à–∏–±–∫—É —Å —Å–µ—Ä–≤–µ—Ä–∞
                    ? dispatch(setAppErrorAC(updateTodolistData.messages[0]))

                    // –ó–∞–¥–∏—Å–ø–∞—Ç—á–∏–ª–∏ –æ—à–∏–±–∫—É —Å–≤–æ—é
                    : dispatch(setAppErrorAC('Some error occurredü§¨'))

                // –ò–∑–º–µ–Ω–∏–ª–∏ —Å—Ç–∞—Ç—É—Å
                dispatch(setAppStatusAC('failed'))
            }
        }
    }

// ------------- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ todolist -----------------------
export const addTodoListsTC = (title: string) => async (dispatch: AppThunkDispatch) => {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º Preloader –≤–æ –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞
    dispatch(setAppStatusAC('loading'))

    // –ó–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ todolist
    const addTodoListsData = await todolistAPI.createTodolist(title)


    // –ï—Å–ª–∏ —É—Å–ø–µ—Ö
    if (addTodoListsData.resultCode === 0) {
        // –ó–∞–¥–∏—Å–ø–∞—Ç—á–∏–ª–∏ –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
        dispatch(addTodolistAC(title, addTodoListsData.data.item.id))

        // –£–±–∏—Ä–∞–µ–º Preloader –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        dispatch(setAppStatusAC('updated'))
    } else {
        // –ü—Ä–æ–≤–µ—Ä–∏–ª–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
        addTodoListsData.messages.length

            // –ó–∞–¥–∏—Å–ø–∞—Ç—á–∏–ª–∏ –æ—à–∏–±–∫—É —Å —Å–µ—Ä–≤–µ—Ä–∞
            ? dispatch(setAppErrorAC(addTodoListsData.messages[0]))

            // –ó–∞–¥–∏—Å–ø–∞—Ç—á–∏–ª–∏ –æ—à–∏–±–∫—É —Å–≤–æ—é
            : dispatch(setAppErrorAC('Some error occurredü§¨'))

        // –ò–∑–º–µ–Ω–∏–ª–∏ —Å—Ç–∞—Ç—É—Å
        dispatch(setAppStatusAC('failed'))
    }
}

// ------------- –£–¥–∞–ª–µ–Ω–∏–µ todolist -----------------------
export const deleteTodoListsTC = (toDoListID: string) => async (dispatch: AppThunkDispatch) => {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º Preloader –≤–æ –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞
    dispatch(setAppStatusAC('loading'))

    // –ó–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ todolist
    await todolistAPI.deleteTodolist(toDoListID)

    // –ó–∞–¥–∏—Å–ø–∞—Ç—á–∏–ª–∏ –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –∏ —É–¥–∞–ª–∏–ª–∏ todolist
    dispatch(removeTodolistAC(toDoListID))

    // –£–±–∏—Ä–∞–µ–º Preloader –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    dispatch(setAppStatusAC('updated'))
}