import { setAppInitializedAC, setAppStatusAC } from "./app-reducer";
import { handleServerNetworkError } from "utils/handle-server-network-error";
import { authAPI, LoginParamsType } from "api/auth-api";
import { clearToDoDataAC, createAppAsyncThunk } from "./todolists-reducer";
import { createSlice } from "@reduxjs/toolkit";
import { ResultCode } from "api/enums";
import { handleServerAppError } from "utils/handle-server-app-error";
import { thunkTryCatch } from "utils/thunk-try-catch";


// *********** Thunk - –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å DAL ****************
// ------------- LogIn –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ -----------------------
export const logInTC = createAppAsyncThunk<{
  isLoggedIn: boolean
}, LoginParamsType>(
  // 1 - prefix
  "auth/logIn",
  // 2 - –ü–µ—Ä–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä - –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∞–Ω–∫–∏, –í—Ç–æ—Ä–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä - thunkAPI
  async (data, thunkAPI) => {
    // 3 - –¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    const { dispatch, rejectWithValue } = thunkAPI;
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º Preloader –≤–æ –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞
    dispatch(setAppStatusAC({ status: "loading" }));

    try {
      // –ó–∞–ø—Ä–æ—Å –Ω–∞ logIn
      const logInData = await authAPI.logIn(data);

      // –ï—Å–ª–∏ —É—Å–ø–µ—Ö
      if (logInData.resultCode === ResultCode.success) {
        // –£–±–∏—Ä–∞–µ–º Preloader –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        dispatch(setAppStatusAC({ status: "idle" }));

        // Return –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ true
        return { isLoggedIn: true };
      } else {
        // ‚ùó –ï—Å–ª–∏ —É –Ω–∞—Å fieldsErrors –µ—Å—Ç—å –∑–Ω–∞—á–∏—Ç –º—ã –±—É–¥–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å —ç—Ç–∏ –æ—à–∏–±–∫–∏
        // –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –ø–æ–ª–µ –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ
        // ‚ùó –ï—Å–ª–∏ —É –Ω–∞—Å fieldsErrors –Ω–µ—Ç –∑–Ω–∞—á–∏—Ç –æ—Ç–æ–±—Ä–∞–∑–∏–º –æ—à–∏–±–∫—É –≥–ª–æ–±–∞–ª—å–Ω–æ
        const isShowAppError = !logInData.fieldsErrors.length;

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ä–≤–µ—Ä–Ω–æ–π –æ—à–∏–±–∫–∏
        handleServerAppError(logInData, dispatch, isShowAppError);
        // –ó–¥–µ—Å—å –±—É–¥–µ—Ç —É–ø–∞–∫–æ–≤–∞–Ω–∞ –æ—à–∏–±–∫–∞
        return rejectWithValue(logInData);
      }

    } catch (error) {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ç–µ–≤–æ–π –æ—à–∏–±–∫–∏
      handleServerNetworkError(error, dispatch);
      // –ó–¥–µ—Å—å –±—É–¥–µ—Ç —É–ø–∞–∫–æ–≤–∞–Ω–∞ –æ—à–∏–±–∫–∞
      return rejectWithValue(null);
    }
  }
);

// ------------- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—Ö–æ–¥–µ -----------------------
export const initializeMeTC = createAppAsyncThunk<{
  isLoggedIn: boolean
}>(
  // 1 - prefix
  "auth/initializeMe",
  // 2 - –ü–µ—Ä–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä - –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∞–Ω–∫–∏, –í—Ç–æ—Ä–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä - thunkAPI
  async (_, thunkAPI) => {
    // 3 - –¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    const { dispatch, rejectWithValue } = thunkAPI;

    return thunkTryCatch(thunkAPI, async () => {
      // –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É
      const meData = await authAPI.me();

      // –ï—Å–ª–∏ —É—Å–ø–µ—Ö
      if (meData.resultCode === ResultCode.success) {
        // –£–±–∏—Ä–∞–µ–º Preloader –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        dispatch(setAppStatusAC({ status: "idle" }));

        // Return –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ true
        return { isLoggedIn: true };
      } else {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ä–≤–µ—Ä–Ω–æ–π –æ—à–∏–±–∫–∏
        handleServerAppError(meData, dispatch);
        // –ó–¥–µ—Å—å –±—É–¥–µ—Ç —É–ø–∞–∫–æ–≤–∞–Ω–∞ –æ—à–∏–±–∫–∞
        return rejectWithValue(null);
      }
    }).finally(() => {
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞
      dispatch(setAppInitializedAC({ isInitialized: true }));
    });

    // try {
    //   // –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É
    //   const meData = await authAPI.me();
    //
    //   // –ï—Å–ª–∏ —É—Å–ø–µ—Ö
    //   if (meData.resultCode === ResultCode.success) {
    //     // –£–±–∏—Ä–∞–µ–º Preloader –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    //     dispatch(setAppStatusAC({ status: "idle" }));
    //
    //     // Return –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ true
    //     return { isLoggedIn: true };
    //   } else {
    //     // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ä–≤–µ—Ä–Ω–æ–π –æ—à–∏–±–∫–∏
    //     handleServerAppError(meData, dispatch);
    //     // –ó–¥–µ—Å—å –±—É–¥–µ—Ç —É–ø–∞–∫–æ–≤–∞–Ω–∞ –æ—à–∏–±–∫–∞
    //     return rejectWithValue(null);
    //   }
    //
    // } catch (error) {
    //
    //   // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ç–µ–≤–æ–π –æ—à–∏–±–∫–∏
    //   handleServerNetworkError(error, dispatch);
    //   // –ó–¥–µ—Å—å –±—É–¥–µ—Ç —É–ø–∞–∫–æ–≤–∞–Ω–∞ –æ—à–∏–±–∫–∞
    //   return rejectWithValue(null);
    // } finally {
    //
    //   // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞
    //   dispatch(setAppInitializedAC({ isInitialized: true }));
    // }
  }
);

// ------------- LogOut —Å —Å–µ—Ä–≤–µ—Ä–∞ -----------------------
export const logOutTC = createAppAsyncThunk<{
  isLoggedIn: boolean
}>(
  // 1 - prefix
  "auth/logOut",
  // 2 - –ü–µ—Ä–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä - –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∞–Ω–∫–∏, –í—Ç–æ—Ä–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä - thunkAPI
  async (_, thunkAPI) => {
    // 3 - –¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    const { dispatch, rejectWithValue } = thunkAPI;
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º Preloader –≤–æ –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞
    dispatch(setAppStatusAC({ status: "loading" }));

    try {
      // –ó–∞–ø—Ä–æ—Å –Ω–∞ LogOut
      const logOutData = await authAPI.logOut();

      // –ï—Å–ª–∏ —É—Å–ø–µ—Ö
      if (logOutData.resultCode === ResultCode.success) {
        // –£–¥–∞–ª–∏–ª–∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ store –ø–æ—Å–ª–µ –≤—ã–ª–æ–≥–∏–Ω–∏–∑–∞—Ü–∏–∏
        dispatch(clearToDoDataAC());
        // –£–±–∏—Ä–∞–µ–º Preloader –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        dispatch(setAppStatusAC({ status: "idle" }));

        // Return –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ false
        return { isLoggedIn: false };
      } else {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ä–≤–µ—Ä–Ω–æ–π –æ—à–∏–±–∫–∏
        handleServerAppError(logOutData, dispatch);
        // –ó–¥–µ—Å—å –±—É–¥–µ—Ç —É–ø–∞–∫–æ–≤–∞–Ω–∞ –æ—à–∏–±–∫–∞
        return rejectWithValue(null);
      }

    } catch (error) {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ç–µ–≤–æ–π –æ—à–∏–±–∫–∏
      handleServerNetworkError(error, dispatch);
      // –ó–¥–µ—Å—å –±—É–¥–µ—Ç —É–ø–∞–∫–æ–≤–∞–Ω–∞ –æ—à–∏–±–∫–∞
      return rejectWithValue(null);
    }
  }
);

// *********** Reducer - —á–∏—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è state –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è action –æ—Ç dispatch ****************
// slice - reducer —Å–æ–∑–¥–∞–µ–º —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏ createSlice
const slice = createSlice({
  // –≤–∞–∂–Ω–æ —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–ª–æ—Å—å, –±—É–¥–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø—Ä–∏—Å—Ç–∞–≤–∫–∏ —Å–æ–≥–ª–∞—Å–Ω–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—é redux ducks ü¶Ü
  name: "auth",
  initialState: {
    isLoggedIn: false as boolean
  },
  // sub-reducers, –∫–∞–∂–¥—ã–π –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–µ–Ω –æ–¥–Ω–æ–º—É –æ–ø–µ—Ä–∞—Ç–æ—Ä—É case –≤ switch, –∫–∞–∫ –º—ã –¥–µ–ª–∞–ª–∏ —Ä–∞–Ω—å—à–µ (–æ–±—ã—á–Ω—ã–π redux)
  reducers: {
    // setIsLoggedInAC: (state,
    //                   action: PayloadAction<{ isLoggedIn: boolean }>) => {
    //     state.isLoggedIn = action.payload.isLoggedIn
    // }
  },
  extraReducers: builder => {
    builder
      .addCase(logInTC.fulfilled,
        (state, action) => {
          state.isLoggedIn = action.payload.isLoggedIn;
        })
      .addCase(initializeMeTC.fulfilled,
        (state, action) => {
          state.isLoggedIn = action.payload.isLoggedIn;
        })
      .addCase(logOutTC.fulfilled,
        (state, action) => {
          state.isLoggedIn = action.payload.isLoggedIn;
        });
  }
});

// –°–æ–∑–¥–∞–µ–º authReducer —Å –ø–æ–º–æ—â—å—é slice
export const authReducer = slice.reducer;

// Action creator –¥–æ—Å—Ç–∞–µ–º —Å –ø–æ–º–æ—â—å—é slice
//export const {setIsLoggedInAC} = slice.actions
// –¢–∏–ø–∏–∑–∞—Ü–∏—è AuthInitialStateType –¥–ª—è —Ç–µ—Å—Ç–æ–≤
export type AuthInitialStateType = ReturnType<typeof slice.getInitialState>

// Thunks —É–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –≤ –æ–±—ä–µ–∫—Ç
export const authThunks = {logOutTC,logInTC, initializeMeTC}
/*
// –¢–∏–ø–∏–∑–∞—Ü–∏—è Actions –≤—Å–µ–≥–æ authReducer
export type AuthActionsTypes = ReturnType<typeof setIsLoggedInAC>;

// –¢–∏–ø–∏–∑–∞—Ü–∏—è initialState –¥–ª—è authReducer
export type AuthInitialStateType = typeof initialState;

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å action –≤ authReducer
const SET_IS_LOGGED_IN = "AUTH/SET-IS-LOGGED-IN";

// *********** –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π state –¥–ª—è authReducer ****************
const initialState = {
  isLoggedIn: false as boolean,
};

// *********** Reducer - —á–∏—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è state –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è action –æ—Ç dispatch ****************
export const authReducer = (
  state: AuthInitialStateType = initialState,
  action: AuthActionsTypes,
): AuthInitialStateType => {
  switch (action.type) {
    case SET_IS_LOGGED_IN:
      return { ...state, isLoggedIn: action.value };
    default:
      return state;
  }
};

// *********** Action creators - —Å–æ–∑–¥–∞—é—Ç –æ–±—ä–µ–∫—Ç action ****************
export const setIsLoggedInAC = (value: boolean) => {
  return { type: SET_IS_LOGGED_IN, value } as const;
};

 */
/*
// *********** Thunk - –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å DAL ****************
// ------------- –õ–æ–≥–∏–Ω–∏–∑–∞—Ü–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ -----------------------
export const logInTC = (data: LoginParamsType) => async (dispatch: AppDispatch) => {
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º Preloader –≤–æ –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞
  dispatch(setAppStatusAC({ status: "loading" }));

  try {
    // –ó–∞–ø—Ä–æ—Å –Ω–∞ –ª–æ–≥–∏–Ω–∏–∑–∞—Ü–∏—é
    const logInData = await authAPI.logIn(data);

    // –ï—Å–ª–∏ —É—Å–ø–µ—Ö
    if (logInData.resultCode === 0) {
      // –ó–∞–¥–∏—Å–ø–∞—Ç—á–∏–ª–∏ –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ true
      dispatch(setIsLoggedInAC({ isLoggedIn: true }));

      // –£–±–∏—Ä–∞–µ–º Preloader –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
      dispatch(setAppStatusAC({ status: "idle" }));
    } else {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ä–≤–µ—Ä–Ω–æ–π –æ—à–∏–±–∫–∏
      handleServerNetworkError(logInData, dispatch);
    }
  } catch (error) {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ç–µ–≤–æ–π –æ—à–∏–±–∫–∏
    handleServerNetworkError(error, dispatch);
  }
};

 */
/*
// ------------- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—Ö–æ–¥–µ -----------------------
export const initializeMeTC = () => async (dispatch: AppDispatch) => {
    try {
        // –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É
        const meData = await authAPI.me()

        // –ï—Å–ª–∏ —É—Å–ø–µ—Ö
        if (meData.resultCode === 0) {
            // –ó–∞–¥–∏—Å–ø–∞—Ç—á–∏–ª–∏ –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ true
            dispatch(setIsLoggedInAC({isLoggedIn: true}))

            // –£–±–∏—Ä–∞–µ–º Preloader –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            dispatch(setAppStatusAC({status: 'idle'}))
        } else {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ä–≤–µ—Ä–Ω–æ–π –æ—à–∏–±–∫–∏
            handleServerNetworkError(meData, dispatch)
        }
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–µ–∏ –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞
        dispatch(setAppInitializedAC({isInitialized: true}))
    } catch (error) {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ç–µ–≤–æ–π –æ—à–∏–±–∫–∏
        handleServerNetworkError(error, dispatch)
    }
}

 */
/*
// ------------- –í—ã–ª–æ–≥–∏–Ω–∏–∑–∞—Ü–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ -----------------------
export const logOutTC = () => async (dispatch: AppDispatch) => {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º Preloader –≤–æ –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞
    dispatch(setAppStatusAC({status: 'loading'}))

    try {
        // –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–ª–æ–≥–∏–Ω–∏–∑–∞—Ü–∏—é
        const logOutData = await authAPI.logOut()

        // –ï—Å–ª–∏ —É—Å–ø–µ—Ö
        if (logOutData.resultCode === 0) {
            // –ó–∞–¥–∏—Å–ø–∞—Ç—á–∏–ª–∏ –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ false
            dispatch(setIsLoggedInAC({isLoggedIn: false}))

            // –£–¥–∞–ª–∏–ª–∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ store –ø–æ—Å–ª–µ –≤—ã–ª–æ–≥–∏–Ω–∏–∑–∞—Ü–∏–∏
            dispatch(clearToDoDataAC())

            // –£–±–∏—Ä–∞–µ–º Preloader –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            dispatch(setAppStatusAC({status: 'idle'}))
        } else {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ä–≤–µ—Ä–Ω–æ–π –æ—à–∏–±–∫–∏
            handleServerNetworkError(logOutData, dispatch)
        }
    } catch (error) {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ç–µ–≤–æ–π –æ—à–∏–±–∫–∏
        handleServerNetworkError(error, dispatch)
    }
}

 */
