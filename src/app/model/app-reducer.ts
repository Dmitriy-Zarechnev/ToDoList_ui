import { createSlice, isFulfilled, isPending, isRejected, PayloadAction } from "@reduxjs/toolkit";
import { authThunks } from "features/auth/model/auth-reducer";


// –¢–∏–ø—ã —Å—Ç–∞—Ç—É—Å–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
export type RequestStatusType = "idle" | "loading" | "succeeded" | "failed" | "updated";


// slice - reducer —Å–æ–∑–¥–∞–µ–º —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏ createSlice
const slice = createSlice({
  // –≤–∞–∂–Ω–æ —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–ª–æ—Å—å, –±—É–¥–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø—Ä–∏—Å—Ç–∞–≤–∫–∏ —Å–æ–≥–ª–∞—Å–Ω–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—é redux ducks ü¶Ü
  name: "app",
  initialState: {
    status: "idle" as RequestStatusType,
    error: null as string | null,
    isInitialized: false as boolean
  },
  // sub-reducers, –∫–∞–∂–¥—ã–π –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–µ–Ω –æ–¥–Ω–æ–º—É –æ–ø–µ—Ä–∞—Ç–æ—Ä—É case –≤ switch, –∫–∞–∫ –º—ã –¥–µ–ª–∞–ª–∏ —Ä–∞–Ω—å—à–µ (–æ–±—ã—á–Ω—ã–π redux)
  reducers: {
    setAppStatus: (state,
                   action: PayloadAction<{ status: RequestStatusType }>) => {
      state.status = action.payload.status;
    },
    setAppError: (state,
                  action: PayloadAction<{ error: string | null }>) => {
      state.error = action.payload.error;
    },
    setAppInitialized: (state,
                        action: PayloadAction<{ isInitialized: boolean }>) => {
      state.isInitialized = action.payload.isInitialized;
    }
  },
  extraReducers: builder => {
    builder
      .addMatcher(isPending, (state) => {
          state.status = "loading";
        }
      )
      .addMatcher(isFulfilled, (state, action) => {
          if (action.type === authThunks.logOut.fulfilled.type) {
            // –£–±—Ä–∞–ª –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            state.status = "idle";
          } else if (action.type === authThunks.getCaptcha.fulfilled.type) {
            // –£–±—Ä–∞–ª –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏ captcha
            state.status = "idle";
          } else if (action.type === authThunks.logIn.fulfilled.type) {
            // –£–±—Ä–∞–ª –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –ø—Ä–∏ –≤—Ö–æ–¥–µ
            state.status = "idle";
          } else {
            state.status = "updated";
          }
        }
      )
      .addMatcher(isRejected, (state, action: any) => {
          state.status = "failed";
          if (action.payload) {
            // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≥–ª–æ–±–∞–ª—å–Ω–æ, –∞ —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω–æ –≤ AddItemForm 40 —Å—Ç—Ä–æ–∫–∞
            //if (action.type === toDoListsThunks.addTodoLists.rejected.type) return
            //if (action.type === tasksThunks.addTaskTC.rejected.type) return

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É —Å–µ—Ä–≤–µ—Ä–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ
            state.error = action.payload.messages[0];
          } else {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É —Å–µ—Ç–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ
            state.error = action.error.message
              ? action.error.message
              : "Some error occurred";
          }
        }
      );
  },
  selectors: {
    selectAppStatus: (sliceState) => sliceState.status,
    selectAppError: (sliceState) => sliceState.error,
    selectAppIsInitialized: (sliceState) => sliceState.isInitialized
  }
});

// –°–æ–∑–¥–∞–µ–º appReducer —Å –ø–æ–º–æ—â—å—é slice
export const appReducer = slice.reducer;

// –£–ø–∞–∫–æ–≤–∞–ª–∏ –≤—Å–µ actions –≤ –æ–¥–∏–Ω –æ–±—ä–µ–∫—Ç
export const appActions = slice.actions;

// –£–ø–∞–∫–æ–≤–∞–ª–∏ –≤—Å–µ selectors –≤ –æ–¥–∏–Ω –æ–±—ä–µ–∫—Ç
export const appSelectors = slice.selectors;

// –¢–∏–ø–∏–∑–∞—Ü–∏—è AppInitialStateType –¥–ª—è —Ç–µ—Å—Ç–æ–≤
export type AppInitialStateType = ReturnType<typeof slice.getInitialState>
