import { Dispatch } from "redux";
import { ResponseType } from "api/todolist-api";
import { setAppErrorAC, setAppStatusAC } from "state/reducers/app-reducer";
import { AppDispatch } from "state/store";
import axios from "axios";


export const handleServerNetworkError = (err: unknown, dispatch: AppDispatch): void => {
  let errorMessage = "Some error occurred";

  // ‚ùó–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ axios –æ—à–∏–±–∫–∏
  if (axios.isAxiosError(err)) {
    // ‚è∫Ô∏è err.response?.data?.message - –Ω–∞–ø—Ä–∏–º–µ—Ä –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–∞—Å–æ–∫ —Å –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–π todolistId
    // ‚è∫Ô∏è err?.message - –Ω–∞–ø—Ä–∏–º–µ—Ä –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞—Å–∫–∏ –≤ offline —Ä–µ–∂–∏–º–µ
    errorMessage = err.response?.data?.message || err?.message || errorMessage;
    // ‚ùó –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–∞—Ç–∏–≤–Ω–æ–π –æ—à–∏–±–∫–∏
  } else if (err instanceof Error) {
    errorMessage = `Native error: ${err.message}`;
    // ‚ùó–ö–∞–∫–æ–π-—Ç–æ –Ω–µ–ø–æ–Ω—è—Ç–Ω—ã–π –∫–µ–π—Å
  } else {
    errorMessage = JSON.stringify(err);
  }
  // –ó–∞–¥–∏—Å–ø–∞—Ç—á–∏–ª–∏ –æ—à–∏–±–∫—É
  dispatch(setAppErrorAC({ error: errorMessage }));
  // –ò–∑–º–µ–Ω–∏–ª–∏ —Å—Ç–∞—Ç—É—Å
  dispatch(setAppStatusAC({ status: "failed" }));
};


// // –¢–∏–ø–∏–∑–∞—Ü–∏—è –¥–ª—è dispatch
// type ErrorUtilsDispatchType = Dispatch;
/*
// generic function –¥–ª—è —Å–µ—Ä–≤–µ—Ä–Ω–æ–π –æ—à–∏–±–∫–∏
export const handleServerAppError = <T>(data: ResponseType<T>, dispatch: Dispatch) => {
  // –ü—Ä–æ–≤–µ—Ä–∏–ª–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
  data.messages.length
    ? // –ó–∞–¥–∏—Å–ø–∞—Ç—á–∏–ª–∏ –æ—à–∏–±–∫—É —Å —Å–µ—Ä–≤–µ—Ä–∞
    dispatch(setAppErrorAC({ error: data.messages[0] }))
    : // –ó–∞–¥–∏—Å–ø–∞—Ç—á–∏–ª–∏ –æ—à–∏–±–∫—É —Å–≤–æ—é
    dispatch(setAppErrorAC({ error: "Some error occurredü§¨" }));

  // –ò–∑–º–µ–Ω–∏–ª–∏ —Å—Ç–∞—Ç—É—Å
  dispatch(setAppStatusAC({ status: "failed" }));
};

// function –¥–ª—è —Å–µ—Ç–µ–≤–æ–π –æ—à–∏–±–∫–∏
export const handleServerNetworkError = (error: any, dispatch: Dispatch) => {
  // –ó–∞–¥–∏—Å–ø–∞—Ç—á–∏–ª–∏ –æ—à–∏–±–∫—É —Å–µ—Ç–∏ –∏ –ø–æ–º–µ–Ω—è–ª–∏ —Å—Ç–∞—Ç—É—Å
  dispatch(setAppErrorAC(error.toString()));
  dispatch(setAppStatusAC({ status: "failed" }));
};

 */
