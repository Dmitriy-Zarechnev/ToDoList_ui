import { createAppAsyncThunk, toDoListsActions, toDoListsThunks } from "../toDoLists/todolists-reducer";
import { tasksAPI, TasksType } from "features/toDoLists/api/tasks-api";
import { RequestStatusType } from "app/model/app-reducer";
import { createSlice, PayloadAction } from "@reduxjs/toolkit";
import { ResultCode, TasksStatuses } from "utils/api/enums";


// –¢–∏–ø–∏–∑–∞—Ü–∏—è TaskWithEntityType
export type TaskWithEntityType = TasksType & { entityTaskStatus: RequestStatusType }

// –¢–∏–ø–∏–∑–∞—Ü–∏—è TasksInitialStateType
export type TasksInitialStateType = {
  [key: string]: Array<TaskWithEntityType>;
};


// *********** Reducer - —á–∏—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è state –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è action –æ—Ç dispatch ****************
// slice - reducer —Å–æ–∑–¥–∞–µ–º —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏ createSlice
const slice = createSlice({
  // –≤–∞–∂–Ω–æ —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–ª–æ—Å—å, –±—É–¥–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø—Ä–∏—Å—Ç–∞–≤–∫–∏ —Å–æ–≥–ª–∞—Å–Ω–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—é redux ducks ü¶Ü
  name: "tasks",
  initialState: {} as TasksInitialStateType,
  // sub-reducers, –∫–∞–∂–¥—ã–π –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–µ–Ω –æ–¥–Ω–æ–º—É –æ–ø–µ—Ä–∞—Ç–æ—Ä—É case –≤ switch, –∫–∞–∫ –º—ã –¥–µ–ª–∞–ª–∏ —Ä–∞–Ω—å—à–µ (–æ–±—ã—á–Ω—ã–π redux)
  reducers: {
    changeTaskEntityStatus: (state,
                             action: PayloadAction<{
                               toDoListID: string,
                               taskId: string,
                               entityTaskStatus: RequestStatusType
                             }>) => {
      const tasks = state[action.payload.toDoListID];
      const index = tasks.findIndex(el => el.id === action.payload.taskId);
      if (index > -1) {
        tasks[index].entityTaskStatus = action.payload.entityTaskStatus;
      }
    }
  },
  // –û–±—â–∏–µ reducers —Å –¥—Ä—É–≥–∏–º–∏
  extraReducers: builder => {
    builder
      .addCase(toDoListsThunks.addTodoLists.fulfilled,
        (state, action) => {
          state[action.payload.toDoListID] = [];
        })
      .addCase(toDoListsThunks.deleteTodoLists.fulfilled,
        (state, action) => {
          delete state[action.payload.toDoListID];
        })
      .addCase(toDoListsThunks.getTodoLists.fulfilled,
        (state, action) => {
          action.payload.toDoLists.forEach((tl) => {
            state[tl.id] = [];
          });
        })
      .addCase(toDoListsActions.clearToDoData,
        (state) => {
          Object.keys(state).forEach(el => {
            delete state[el];
          });
        })
      .addCase(getTasks.fulfilled,
        (state, action) => {
          state[action.payload.toDoListID] = action.payload.tasks.map(el => {
            return { ...el, entityTaskStatus: "idle" };
          });
        })
      .addCase(addTask.fulfilled,
        (state, action) => {
          if (action.payload) {
            const tasks = state[action.payload.task.todoListId];
            tasks.unshift(action.payload.task);
          }
        })
      .addCase(deleteTask.fulfilled,
        (state, action) => {
          const tasks = state[action.payload.toDoListID];
          const index = tasks.findIndex(el => el.id === action.payload.taskId);
          if (index > -1) {
            tasks.splice(index, 1);
          }
        })
      .addCase(updateTaskStatus.fulfilled,
        (state, action) => {
          const tasks = state[action.payload.toDoListID];
          const index = tasks.findIndex(el => el.id === action.payload.taskId);
          if (index > -1) {
            tasks[index].status = action.payload.status;
          }
        })
      .addCase(updateTaskTitle.fulfilled,
        (state, action) => {
          const tasks = state[action.payload.toDoListID];
          const index = tasks.findIndex(el => el.id === action.payload.taskId);
          if (index > -1) {
            tasks[index].title = action.payload.title;
          }
        });
  },
  // Selectors
  selectors: {
    selectTasks: (sliceState) => sliceState
  }
});


// *********** Thunk - –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å DAL ****************
// ------------- –ü–æ–ª—É—á–µ–Ω–∏–µ tasks —Å —Å–µ—Ä–≤–µ—Ä–∞ -----------------------
const getTasks = createAppAsyncThunk<{
  toDoListID: string, tasks: TasksType[]
}, string>(
  // 1 - prefix
  `${slice.name}/getTasks`,
  // 2 - –ü–µ—Ä–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä - –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∞–Ω–∫–∏, –í—Ç–æ—Ä–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä - thunkAPI
  async (toDoListID, _) => {

    // –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ tasks —Å —Å–µ—Ä–≤–µ—Ä–∞
    const getTasksData = await tasksAPI.getTasks(toDoListID);


    // return –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
    return { toDoListID, tasks: getTasksData.items };
  }
);


// ------------- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ task -----------------------
const addTask = createAppAsyncThunk<{
  task: TaskWithEntityType
}, { toDoListID: string, title: string }>(
  // 1 - prefix
  `${slice.name}/addTask`,
  // 2 - –ü–µ—Ä–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä - –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∞–Ω–∫–∏, –í—Ç–æ—Ä–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä - thunkAPI
  async ({ toDoListID, title }, thunkAPI) => {
    // 3 - –¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    const { dispatch, rejectWithValue } = thunkAPI;

    // –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –≤–æ –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞
    dispatch(toDoListsActions.changeTodolistEntityStatus({ toDoListID, entityStatus: "loading" }));

    // –ó–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ task
    const addTaskData = await tasksAPI.createTask(toDoListID, title);

    // –ï—Å–ª–∏ —É—Å–ø–µ—Ö
    if (addTaskData.resultCode === ResultCode.success) {

      // –í–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
      dispatch(toDoListsActions.changeTodolistEntityStatus({ toDoListID, entityStatus: "idle" }));
      // Return –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –∏ –ø—Ä–∏–±–∞–≤–∏–ª–∏ entityTaskStatus
      return { task: { ...addTaskData.data.item, entityTaskStatus: "idle" } };
    } else {

      // –í–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ—Å–ª–µ –ø—Ä–æ–≤–∞–ª–∞
      dispatch(toDoListsActions.changeTodolistEntityStatus({ toDoListID, entityStatus: "idle" }));
      // –ó–¥–µ—Å—å –±—É–¥–µ—Ç —É–ø–∞–∫–æ–≤–∞–Ω–∞ –æ—à–∏–±–∫–∞
      return rejectWithValue(addTaskData);
    }
  }
);


// ------------- –£–¥–∞–ª–µ–Ω–∏–µ task -----------------------
const deleteTask = createAppAsyncThunk<{
  toDoListID: string, taskId: string
}, { toDoListID: string, taskId: string }>(
  // 1 - prefix
  `${slice.name}/deleteTask`,
  // 2 - –ü–µ—Ä–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä - –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∞–Ω–∫–∏, –í—Ç–æ—Ä–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä - thunkAPI
  async ({ toDoListID, taskId }, thunkAPI) => {
    // 3 - –¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    const { dispatch, rejectWithValue } = thunkAPI;

    // –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –≤–æ –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞
    dispatch(tasksActions.changeTaskEntityStatus({ toDoListID, taskId, entityTaskStatus: "loading" }));

    // –ó–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ task
    const deleteTaskData = await tasksAPI.deleteTask(toDoListID, taskId);

    // –ï—Å–ª–∏ —É—Å–ø–µ—Ö
    if (deleteTaskData.resultCode === ResultCode.success) {

      // –í–∫–ª—é—á–∏–ª–∏ –ø–æ—Å–ª–µ —É—Å–ø–µ—Ö–∞
      dispatch(tasksActions.changeTaskEntityStatus({ toDoListID, taskId, entityTaskStatus: "idle" }));

      // Return –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –∏ —É–¥–∞–ª–∏–ª–∏ task
      return { toDoListID, taskId };
    } else {

      // –í–∫–ª—é—á–∏–ª–∏ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–∞–ª–∞
      dispatch(tasksActions.changeTaskEntityStatus({ toDoListID, taskId, entityTaskStatus: "failed" }));
      // –ó–¥–µ—Å—å –±—É–¥–µ—Ç —É–ø–∞–∫–æ–≤–∞–Ω–∞ –æ—à–∏–±–∫–∞
      return rejectWithValue(deleteTaskData);
    }
  }
);


// ------------- –ò–∑–º–µ–Ω–µ–Ω–∏–µ task's status -----------------------
const updateTaskStatus = createAppAsyncThunk<{
  toDoListID: string, taskId: string, status: TasksStatuses
}, { toDoListID: string, taskId: string, status: TasksStatuses }>(
  // 1 - prefix
  `${slice.name}/updateTaskStatus`,
  // 2 - –ü–µ—Ä–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä - –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∞–Ω–∫–∏, –í—Ç–æ—Ä–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä - thunkAPI
  async ({ toDoListID, taskId, status }, thunkAPI) => {
    // 3 - –¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    const { dispatch, rejectWithValue, getState } = thunkAPI;

    // –ü–æ–ª—É—á–∏–ª–∏ –≤—Å–µ tasks –∏–∑ state
    const allTasksFromState = getState().tasks;

    // –ù–∞—à–ª–∏ –Ω—É–∂–Ω—ã–µ tasks –ø–æ todolistId, –∞ –∑–∞—Ç–µ–º –∏—Å–ø–æ–ª—å–∑—É—è taskId –Ω—É–∂–Ω—É—é task
    const task = allTasksFromState[toDoListID].find((t) => {
      return t.id === taskId;
    });

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, —Ç.–∫ find –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å undefined
    if (task) {
      // –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –≤–æ –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞
      dispatch(tasksActions.changeTaskEntityStatus({ toDoListID, taskId, entityTaskStatus: "loading" }));


      // –ó–∞–ø—Ä–æ—Å –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ task's status
      const updateTaskData = await tasksAPI.updateTask(toDoListID, taskId, {
        title: task.title,
        startDate: task.startDate,
        priority: task.priority,
        description: task.description,
        deadline: task.deadline,
        status: status
      });

      // –ï—Å–ª–∏ —É—Å–ø–µ—Ö
      if (updateTaskData.resultCode === ResultCode.success) {


        // –í–∫–ª—é—á–∏–ª–∏ –ø–æ—Å–ª–µ —É—Å–ø–µ—Ö–∞
        dispatch(tasksActions.changeTaskEntityStatus({ toDoListID, taskId, entityTaskStatus: "idle" }));

        // Dispatch –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –∏ –ø–æ–º–µ–Ω—è–ª–∏ status
        return { toDoListID, taskId, status };
      } else {

        // –í–∫–ª—é—á–∏–ª–∏ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–∞–ª–∞
        dispatch(tasksActions.changeTaskEntityStatus({ toDoListID, taskId, entityTaskStatus: "failed" }));
        // –ó–¥–µ—Å—å –±—É–¥–µ—Ç —É–ø–∞–∫–æ–≤–∞–Ω–∞ –æ—à–∏–±–∫–∞
        return rejectWithValue(updateTaskData);
      }
    }
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç —É–ø–∞–∫–æ–≤–∞–Ω–∞ –æ—à–∏–±–∫–∞
    return rejectWithValue(null);
  }
);


// ------------- –ò–∑–º–µ–Ω–µ–Ω–∏–µ tasks title -----------------------
const updateTaskTitle = createAppAsyncThunk<{
  toDoListID: string, taskId: string, title: string
}, { toDoListID: string, taskId: string, title: string }>(
  // 1 - prefix
  `${slice.name}/updateTaskTitle`,
  // 2 - –ü–µ—Ä–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä - –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∞–Ω–∫–∏, –í—Ç–æ—Ä–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä - thunkAPI
  async ({ toDoListID, taskId, title }, thunkAPI) => {
    // 3 - –¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    const { dispatch, rejectWithValue, getState } = thunkAPI;

    // –ü–æ–ª—É—á–∏–ª–∏ –≤—Å–µ tasks –∏–∑ state
    const allTasksFromState = getState().tasks;

    // –ù–∞—à–ª–∏ –Ω—É–∂–Ω—ã–µ tasks –ø–æ todolistId, –∞ –∑–∞—Ç–µ–º –∏—Å–ø–æ–ª—å–∑—É—è taskId –Ω—É–∂–Ω—É—é task
    const task = allTasksFromState[toDoListID].find((t) => {
      return t.id === taskId;
    });

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, —Ç.–∫ find –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å undefined
    if (task) {

      // –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –≤–æ –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞
      dispatch(tasksActions.changeTaskEntityStatus({ toDoListID, taskId, entityTaskStatus: "loading" }));


      // –ó–∞–ø—Ä–æ—Å –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ task's title
      const updateTaskData = await tasksAPI.updateTask(toDoListID, taskId, {
        title: title,
        startDate: task.startDate,
        priority: task.priority,
        description: task.description,
        deadline: task.deadline,
        status: task.status
      });

      // –ï—Å–ª–∏ —É—Å–ø–µ—Ö
      if (updateTaskData.resultCode === ResultCode.success) {

        // –í–∫–ª—é—á–∏–ª–∏ –ø–æ—Å–ª–µ —É—Å–ø–µ—Ö–∞
        dispatch(tasksActions.changeTaskEntityStatus({ toDoListID, taskId, entityTaskStatus: "idle" }));

        // Return –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ –∏ –ø–æ–º–µ–Ω—è–ª–∏ title
        return { toDoListID, taskId, title };
      } else {

        // –í–∫–ª—é—á–∏–ª–∏ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–∞–ª–∞
        dispatch(tasksActions.changeTaskEntityStatus({ toDoListID, taskId, entityTaskStatus: "failed" }));
        // –ó–¥–µ—Å—å –±—É–¥–µ—Ç —É–ø–∞–∫–æ–≤–∞–Ω–∞ –æ—à–∏–±–∫–∞
        return rejectWithValue(updateTaskData);
      }
    }
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç —É–ø–∞–∫–æ–≤–∞–Ω–∞ –æ—à–∏–±–∫–∞
    return rejectWithValue(null);
  }
);


// –°–æ–∑–¥–∞–µ–º tasksReducer —Å –ø–æ–º–æ—â—å—é slice
export const tasksReducer = slice.reducer;

// Action creators –¥–æ—Å—Ç–∞–µ–º —Å –ø–æ–º–æ—â—å—é slice
export const tasksActions = slice.actions;
// Thunks —É–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –≤ –æ–±—ä–µ–∫—Ç
export const tasksThunks = { getTasks, addTask, deleteTask, updateTaskStatus, updateTaskTitle };

// –£–ø–∞–∫–æ–≤–∞–ª–∏ –≤—Å–µ selectors –≤ –æ–¥–∏–Ω –æ–±—ä–µ–∫—Ç
export const tasksSelectors = slice.selectors;

