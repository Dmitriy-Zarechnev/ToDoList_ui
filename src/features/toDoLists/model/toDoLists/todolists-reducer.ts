import { AppDispatch, AppRootStateType } from "app/model/store";
import { ResponseType, todolistAPI, TodolistType } from "features/toDoLists/api/todolist-api";
import { RequestStatusType } from "app/model/app-reducer";
import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit";
import { ResultCode } from "common/api/enums";


// –¢–∏–ø–∏–∑–∞—Ü–∏—è Filters
export type FilterValuesType = "all" | "active" | "completed";

// –¢–∏–ø–∏–∑–∞—Ü–∏—è ToDoLists –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Å filter
export type ToDoListDomainType = TodolistType & {
  filter: FilterValuesType;
  entityStatus: RequestStatusType;
};

// –¢–∏–ø–∏–∑–∏—Ä–æ–≤–∞–ª–∏ createAsyncThunk –∏ –≤–Ω—É—Ç—Ä–∏ state, dispatch, rejectValue
export const createAppAsyncThunk = createAsyncThunk.withTypes<{
  state: AppRootStateType
  dispatch: AppDispatch
  rejectValue: null | ResponseType
}>();


// *********** Reducer - —á–∏—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è state –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è action –æ—Ç dispatch ****************
// slice - reducer —Å–æ–∑–¥–∞–µ–º —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏ createSlice
const slice = createSlice({
  // –≤–∞–∂–Ω–æ —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–ª–æ—Å—å, –±—É–¥–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø—Ä–∏—Å—Ç–∞–≤–∫–∏ —Å–æ–≥–ª–∞—Å–Ω–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—é redux ducks ü¶Ü
  name: "toDoLists",
  initialState: [] as ToDoListDomainType[],
  // sub-reducers, –∫–∞–∂–¥—ã–π –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–µ–Ω –æ–¥–Ω–æ–º—É –æ–ø–µ—Ä–∞—Ç–æ—Ä—É case –≤ switch, –∫–∞–∫ –º—ã –¥–µ–ª–∞–ª–∏ —Ä–∞–Ω—å—à–µ (–æ–±—ã—á–Ω—ã–π redux)
  reducers: {
    changeTodolistFilter: (state,
                           action: PayloadAction<{ toDoListID: string, filter: FilterValuesType }>) => {
      const toDo =
        state.find(el => el.id === action.payload.toDoListID);

      if (toDo) {
        toDo.filter = action.payload.filter;
      }
    },
    changeTodolistEntityStatus: (state,
                                 action: PayloadAction<{
                                   toDoListID: string,
                                   entityStatus: RequestStatusType
                                 }>) => {
      const toDo =
        state.find(el => el.id === action.payload.toDoListID);

      if (toDo) {
        toDo.entityStatus = action.payload.entityStatus;
      }
    },
    clearToDoData: (state) => {
      state.splice(0, state.length);
    }
  },
  extraReducers: builder => {
    builder
      .addCase(getTodoLists.fulfilled,
        (state, action) => {
          return action.payload.toDoLists.map(el => ({ ...el, filter: "all", entityStatus: "idle" }));
        })
      .addCase(updateTodoLists.fulfilled,
        (state, action) => {
          const toDo =
            state.find(el => el.id === action.payload.toDoListID);

          if (toDo) {
            toDo.title = action.payload.title;
          }
        })
      .addCase(addTodoLists.fulfilled,
        (state, action) => {
          state.unshift({
            id: action.payload.toDoListID,
            title: action.payload.title,
            filter: "all",
            addedDate: "",
            order: 0,
            entityStatus: "idle"
          });
        })
      .addCase(deleteTodoLists.fulfilled,
        (state, action) => {
          const index = state.findIndex(el => el.id === action.payload.toDoListID);
          if (index > -1) {
            state.splice(index, 1);
          }
        });
  },
  selectors: {
    selectToDoLists: (sliceState) => sliceState
  }
});


// *********** Thunk - –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å DAL ****************
// ------------- –ü–æ–ª—É—á–µ–Ω–∏–µ todolist —Å —Å–µ—Ä–≤–µ—Ä–∞ -----------------------
const getTodoLists = createAppAsyncThunk<{
  toDoLists: TodolistType[]
}>(
  // 1 - prefix
  `${slice.name}/getTodoLists`,
  // 2 - –ü–µ—Ä–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä - –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∞–Ω–∫–∏, –í—Ç–æ—Ä–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä - thunkAPI
  async () => {

    // –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ todolist —Å —Å–µ—Ä–≤–µ—Ä–∞
    const getTodoListsData = await todolistAPI.getTodolists();

    // Return –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
    return { toDoLists: getTodoListsData };
  }
);


// ------------- –ò–∑–º–µ–Ω–µ–Ω–∏–µ toDoList's title -----------------------
const updateTodoLists = createAppAsyncThunk<{
  toDoListID: string, title: string
}, { toDoListID: string, title: string }>(
  // 1 - prefix
  `${slice.name}/updateTodoLists`,
  // 2 - –ü–µ—Ä–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä - –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∞–Ω–∫–∏, –í—Ç–æ—Ä–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä - thunkAPI
  async ({ toDoListID, title }, thunkAPI) => {
    // 3 - –¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    const { rejectWithValue, getState } = thunkAPI;

    // –ü–æ–ª—É—á–∏–ª–∏ –≤—Å–µ toDoLists –∏–∑ state
    const allTodoListsFromState = getState().toDoLists;

    // –ù–∞—à–ª–∏ –Ω—É–∂–Ω—ã–π todolist –ø–æ todolistId
    const toDoList = allTodoListsFromState.find((t) => {
      return t.id === toDoListID;
    });

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, —Ç.–∫ find –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å undefined
    if (toDoList) {

      // –ó–∞–ø—Ä–æ—Å –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ toDoList's title
      const updateTodolistData = await todolistAPI.updateTodolist(toDoListID, title);

      // –ï—Å–ª–∏ —É—Å–ø–µ—Ö
      if (updateTodolistData.resultCode === ResultCode.success) {

        // return –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –∏ –ø–æ–º–µ–Ω—è–ª–∏ title
        return { toDoListID, title };
      } else {

        // –ó–¥–µ—Å—å –±—É–¥–µ—Ç —É–ø–∞–∫–æ–≤–∞–Ω–∞ –æ—à–∏–±–∫–∞
        return rejectWithValue(updateTodolistData);
      }
    }

    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç —É–ø–∞–∫–æ–≤–∞–Ω–∞ –æ—à–∏–±–∫–∞
    return rejectWithValue(null);
  }
);


// ------------- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ todolist -----------------------
const addTodoLists = createAppAsyncThunk<{
  title: string, toDoListID: string
}, string>(
  // 1 - prefix
  `${slice.name}/addTodoLists`,
  // 2 - –ü–µ—Ä–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä - –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∞–Ω–∫–∏, –í—Ç–æ—Ä–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä - thunkAPI
  async (title, { rejectWithValue }) => {

    // –ó–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ todolist
    const addTodoListsData = await todolistAPI.createTodolist(title);

    // –ï—Å–ª–∏ —É—Å–ø–µ—Ö
    if (addTodoListsData.resultCode === ResultCode.success) {

      // return –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
      return { title, toDoListID: addTodoListsData.data.item.id };
    } else {

      // –ó–¥–µ—Å—å –±—É–¥–µ—Ç —É–ø–∞–∫–æ–≤–∞–Ω–∞ –æ—à–∏–±–∫–∞
      return rejectWithValue(addTodoListsData);
    }
  }
);


// ------------- –£–¥–∞–ª–µ–Ω–∏–µ todolist -----------------------
const deleteTodoLists = createAppAsyncThunk<{
  toDoListID: string
}, string>(
  // 1 - prefix
  `${slice.name}/deleteTodoLists`,
  // 2 - –ü–µ—Ä–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä - –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∞–Ω–∫–∏, –í—Ç–æ—Ä–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä - thunkAPI
  async (toDoListID, thunkAPI) => {
    // 3 - –¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    const { dispatch, rejectWithValue } = thunkAPI;

    // –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –≤–æ –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞
    dispatch(toDoListsActions.changeTodolistEntityStatus({ toDoListID, entityStatus: "loading" }));
    // –ó–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ todolist
    const deleteTodolistData = await todolistAPI.deleteTodolist(toDoListID);

    // –ï—Å–ª–∏ —É—Å–ø–µ—Ö
    if (deleteTodolistData.resultCode === ResultCode.success) {
      // –í–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
      dispatch(toDoListsActions.changeTodolistEntityStatus({ toDoListID, entityStatus: "idle" }));

      // return –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –∏ —É–¥–∞–ª–∏–ª–∏ todolist
      return { toDoListID };
    } else {

      // –í–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞
      dispatch(toDoListsActions.changeTodolistEntityStatus({ toDoListID, entityStatus: "failed" }));
      // –ó–¥–µ—Å—å –±—É–¥–µ—Ç —É–ø–∞–∫–æ–≤–∞–Ω–∞ –æ—à–∏–±–∫–∞
      return rejectWithValue(deleteTodolistData);
    }
  }
);


// –°–æ–∑–¥–∞–µ–º toDoListsReducer —Å –ø–æ–º–æ—â—å—é slice
export const toDoListsReducer = slice.reducer;

// Action creator –¥–æ—Å—Ç–∞–µ–º —Å –ø–æ–º–æ—â—å—é slice
export const toDoListsActions = slice.actions;

// Thunks —É–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –≤ –æ–±—ä–µ–∫—Ç
export const toDoListsThunks = { deleteTodoLists, addTodoLists, updateTodoLists, getTodoLists };

// –£–ø–∞–∫–æ–≤–∞–ª–∏ –≤—Å–µ selectors –≤ –æ–¥–∏–Ω –æ–±—ä–µ–∫—Ç
export const toDoListsSelectors = slice.selectors;
