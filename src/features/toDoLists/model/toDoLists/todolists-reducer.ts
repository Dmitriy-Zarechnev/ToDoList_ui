import {AppDispatch, AppRootStateType} from '../../../../app/model/store'
import {ResponseType, todolistAPI, TodolistType} from 'features/toDoLists/api/todolist-api'
import {RequestStatusType} from '../../../../app/model/app-reducer'
import {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit'
import {ResultCode} from 'utils/api/enums'


// –¢–∏–ø–∏–∑–∞—Ü–∏—è Filters
export type FilterValuesType = 'all' | 'active' | 'completed';

// –¢–∏–ø–∏–∑–∞—Ü–∏—è ToDoLists –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Å filter
export type ToDoListDomainType = TodolistType & {
    filter: FilterValuesType;
    entityStatus: RequestStatusType;
};

// –¢–∏–ø–∏–∑–∏—Ä–æ–≤–∞–ª–∏ createAsyncThunk –∏ –≤–Ω—É—Ç—Ä–∏ state, dispatch, rejectValue
export const createAppAsyncThunk = createAsyncThunk.withTypes<{
    state: AppRootStateType
    dispatch: AppDispatch
    rejectValue: null | ResponseType
}>()


// *********** Thunk - –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å DAL ****************
// ------------- –ü–æ–ª—É—á–µ–Ω–∏–µ todolist —Å —Å–µ—Ä–≤–µ—Ä–∞ -----------------------
export const getTodoListsTC = createAppAsyncThunk<{
    toDoLists: TodolistType[]
}>(
    // 1 - prefix
    'toDoLists/getTodoLists',
    // 2 - –ü–µ—Ä–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä - –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∞–Ω–∫–∏, –í—Ç–æ—Ä–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä - thunkAPI
    async () => {
        // 3 - –¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        //const {dispatch, rejectWithValue} = thunkAPI

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º Preloader –≤–æ –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞
        //dispatch(setAppStatusAC({status: 'loading'}))

        //try {
        // –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ todolist —Å —Å–µ—Ä–≤–µ—Ä–∞
        const getTodoListsData = await todolistAPI.getTodolists()

        // –£–±–∏—Ä–∞–µ–º Preloader –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        // dispatch(setAppStatusAC({status: 'succeeded'}))

        // Return –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
        return {toDoLists: getTodoListsData}
        //} catch (error) {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ç–µ–≤–æ–π –æ—à–∏–±–∫–∏
        // handleServerNetworkError(error, dispatch)
        // –ó–¥–µ—Å—å –±—É–¥–µ—Ç —É–ø–∞–∫–æ–≤–∞–Ω–∞ –æ—à–∏–±–∫–∞
        // return rejectWithValue(null)
        // }
    }
)


// ------------- –ò–∑–º–µ–Ω–µ–Ω–∏–µ toDoList's title -----------------------
export const updateTodoListsTC = createAppAsyncThunk<{
    toDoListID: string, title: string
}, { toDoListID: string, title: string }>(
    // 1 - prefix
    'toDoLists/updateTodoLists',
    // 2 - –ü–µ—Ä–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä - –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∞–Ω–∫–∏, –í—Ç–æ—Ä–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä - thunkAPI
    async ({toDoListID, title}, thunkAPI) => {
        // 3 - –¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        const {dispatch, rejectWithValue, getState} = thunkAPI

        // –ü–æ–ª—É—á–∏–ª–∏ –≤—Å–µ toDoLists –∏–∑ state
        const allTodoListsFromState = getState().toDoLists

        // –ù–∞—à–ª–∏ –Ω—É–∂–Ω—ã–π todolist –ø–æ todolistId
        const toDoList = allTodoListsFromState.find((t) => {
            return t.id === toDoListID
        })

        // –ü—Ä–æ–≤–µ—Ä–∫–∞, —Ç.–∫ find –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å undefined
        if (toDoList) {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º Preloader –≤–æ –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞
            //dispatch(setAppStatusAC({status: 'loading'}))

            // try {
            // –ó–∞–ø—Ä–æ—Å –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ toDoList's title
            const updateTodolistData = await todolistAPI.updateTodolist(toDoListID, title)

            // –ï—Å–ª–∏ —É—Å–ø–µ—Ö
            if (updateTodolistData.resultCode === ResultCode.success) {
                // –£–±–∏—Ä–∞–µ–º Preloader –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
                //dispatch(setAppStatusAC({status: 'updated'}))

                // return –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –∏ –ø–æ–º–µ–Ω—è–ª–∏ title
                return {toDoListID, title}
            } else {
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ä–≤–µ—Ä–Ω–æ–π –æ—à–∏–±–∫–∏
                //handleServerAppError(updateTodolistData, dispatch)
                // –ó–¥–µ—Å—å –±—É–¥–µ—Ç —É–ø–∞–∫–æ–≤–∞–Ω–∞ –æ—à–∏–±–∫–∞
                return rejectWithValue(updateTodolistData)
            }
            // } catch (error) {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ç–µ–≤–æ–π –æ—à–∏–±–∫–∏
            // handleServerNetworkError(error, dispatch)
            // –ó–¥–µ—Å—å –±—É–¥–µ—Ç —É–ø–∞–∫–æ–≤–∞–Ω–∞ –æ—à–∏–±–∫–∞
            // return rejectWithValue(null)
            //}
        }
        // –ó–¥–µ—Å—å –±—É–¥–µ—Ç —É–ø–∞–∫–æ–≤–∞–Ω–∞ –æ—à–∏–±–∫–∞
        return rejectWithValue(null)
    }
)


// ------------- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ todolist -----------------------
export const addTodoListsTC = createAppAsyncThunk<{
    title: string, toDoListID: string
}, string>(
    // 1 - prefix
    'toDoLists/addTodoLists',
    // 2 - –ü–µ—Ä–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä - –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∞–Ω–∫–∏, –í—Ç–æ—Ä–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä - thunkAPI
    async (title, thunkAPI) => {
        // 3 - –¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        const {dispatch, rejectWithValue} = thunkAPI

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º Preloader –≤–æ –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞
        //dispatch(setAppStatusAC({status: 'loading'}))

        //try {
        // –ó–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ todolist
        const addTodoListsData = await todolistAPI.createTodolist(title)

        // –ï—Å–ª–∏ —É—Å–ø–µ—Ö
        if (addTodoListsData.resultCode === ResultCode.success) {
            // –£–±–∏—Ä–∞–µ–º Preloader –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            // dispatch(setAppStatusAC({status: 'updated'}))

            // return –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
            return {title, toDoListID: addTodoListsData.data.item.id}
        } else {

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ä–≤–µ—Ä–Ω–æ–π –æ—à–∏–±–∫–∏
            // handleServerAppError(addTodoListsData, dispatch)
            // –ó–¥–µ—Å—å –±—É–¥–µ—Ç —É–ø–∞–∫–æ–≤–∞–Ω–∞ –æ—à–∏–±–∫–∞
            debugger
            return rejectWithValue(addTodoListsData)

        }
        // } catch (error) {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ç–µ–≤–æ–π –æ—à–∏–±–∫–∏
        // handleServerNetworkError(error, dispatch)
        // –ó–¥–µ—Å—å –±—É–¥–µ—Ç —É–ø–∞–∫–æ–≤–∞–Ω–∞ –æ—à–∏–±–∫–∞
        //   return rejectWithValue(null)
        // }
    }
)


// ------------- –£–¥–∞–ª–µ–Ω–∏–µ todolist -----------------------
export const deleteTodoListsTC = createAppAsyncThunk<{
    toDoListID: string
}, string>(
    // 1 - prefix
    'toDoLists/deleteTodoLists',
    // 2 - –ü–µ—Ä–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä - –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∞–Ω–∫–∏, –í—Ç–æ—Ä–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä - thunkAPI
    async (toDoListID, thunkAPI) => {
        // 3 - –¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        const {dispatch, rejectWithValue} = thunkAPI
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º Preloader –≤–æ –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞
        // dispatch(setAppStatusAC({status: 'loading'}))

        // –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –≤–æ –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞
        dispatch(changeTodolistEntityStatusAC({toDoListID, entityStatus: 'loading'}))

        // try {
        // –ó–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ todolist
        const deleteTodolistData = await todolistAPI.deleteTodolist(toDoListID)

        // –ï—Å–ª–∏ —É—Å–ø–µ—Ö
        if (deleteTodolistData.resultCode === ResultCode.success) {
            // –í–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            dispatch(changeTodolistEntityStatusAC({toDoListID, entityStatus: 'idle'}))
            // –£–±–∏—Ä–∞–µ–º Preloader –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            //dispatch(setAppStatusAC({status: 'updated'}))

            // return –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –∏ —É–¥–∞–ª–∏–ª–∏ todolist
            return {toDoListID}
        } else {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ä–≤–µ—Ä–Ω–æ–π –æ—à–∏–±–∫–∏
            //  handleServerAppError(deleteTodolistData, dispatch)
            // –ó–¥–µ—Å—å –±—É–¥–µ—Ç —É–ø–∞–∫–æ–≤–∞–Ω–∞ –æ—à–∏–±–∫–∞
            return rejectWithValue(deleteTodolistData)
        }
        //} catch (error) {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ç–µ–≤–æ–π –æ—à–∏–±–∫–∏
        //  handleServerNetworkError(error, dispatch)
        // –ó–¥–µ—Å—å –±—É–¥–µ—Ç —É–ø–∞–∫–æ–≤–∞–Ω–∞ –æ—à–∏–±–∫–∞
        //  return rejectWithValue(null)
        //}
    }
)

// *********** Reducer - —á–∏—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è state –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è action –æ—Ç dispatch ****************
// slice - reducer —Å–æ–∑–¥–∞–µ–º —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏ createSlice
const slice = createSlice({
    // –≤–∞–∂–Ω–æ —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–ª–æ—Å—å, –±—É–¥–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø—Ä–∏—Å—Ç–∞–≤–∫–∏ —Å–æ–≥–ª–∞—Å–Ω–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—é redux ducks ü¶Ü
    name: 'toDoLists',
    initialState: [] as ToDoListDomainType[],
    // sub-reducers, –∫–∞–∂–¥—ã–π –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–µ–Ω –æ–¥–Ω–æ–º—É –æ–ø–µ—Ä–∞—Ç–æ—Ä—É case –≤ switch, –∫–∞–∫ –º—ã –¥–µ–ª–∞–ª–∏ —Ä–∞–Ω—å—à–µ (–æ–±—ã—á–Ω—ã–π redux)
    reducers: {
        changeTodolistFilterAC: (state,
                                 action: PayloadAction<{ toDoListID: string, filter: FilterValuesType }>) => {
            const toDo =
                state.find(el => el.id === action.payload.toDoListID)

            if (toDo) {
                toDo.filter = action.payload.filter
            }
        },
        changeTodolistEntityStatusAC: (state,
                                       action: PayloadAction<{
                                           toDoListID: string,
                                           entityStatus: RequestStatusType
                                       }>) => {
            const toDo =
                state.find(el => el.id === action.payload.toDoListID)

            if (toDo) {
                toDo.entityStatus = action.payload.entityStatus
            }
        },
        clearToDoDataAC: (state) => {
            state.splice(0, state.length)
        }
    },
    extraReducers: builder => {
        builder
            .addCase(getTodoListsTC.fulfilled,
                (state, action) => {
                    return action.payload.toDoLists.map(el => ({...el, filter: 'all', entityStatus: 'idle'}))
                })
            .addCase(updateTodoListsTC.fulfilled,
                (state, action) => {
                    const toDo =
                        state.find(el => el.id === action.payload.toDoListID)

                    if (toDo) {
                        toDo.title = action.payload.title
                    }
                })
            .addCase(addTodoListsTC.fulfilled,
                (state, action) => {
                    state.unshift({
                        id: action.payload.toDoListID,
                        title: action.payload.title,
                        filter: 'all',
                        addedDate: '',
                        order: 0,
                        entityStatus: 'idle'
                    })
                })
            .addCase(deleteTodoListsTC.fulfilled,
                (state, action) => {
                    const index = state.findIndex(el => el.id === action.payload.toDoListID)
                    if (index > -1) {
                        state.splice(index, 1)
                    }
                })
    }
})


// –°–æ–∑–¥–∞–µ–º toDoListsReducer —Å –ø–æ–º–æ—â—å—é slice
export const toDoListsReducer = slice.reducer
// Action creators –¥–æ—Å—Ç–∞–µ–º —Å –ø–æ–º–æ—â—å—é slice
export const {
    changeTodolistFilterAC,
    changeTodolistEntityStatusAC,
    clearToDoDataAC
} = slice.actions

// Action creator –¥–æ—Å—Ç–∞–µ–º —Å –ø–æ–º–æ—â—å—é slice
export const toDoListsActions = slice.actions

// Thunks —É–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –≤ –æ–±—ä–µ–∫—Ç
export const toDoListsThunks = {deleteTodoListsTC, addTodoListsTC, updateTodoListsTC, getTodoListsTC}

/*
// –¢–∏–ø–∏–∑–∞—Ü–∏—è Actions –≤—Å–µ–≥–æ todolistsReducer
export type ToDoListActionsTypes =
  | RemoveTodolistActionType
  | AddTodolistActionType
  | SetTodolistActionType
  | ReturnType<typeof changeTodolistTitleAC>
  | ReturnType<typeof changeTodolistFilterAC>
  | ReturnType<typeof changeTodolistEntityStatusAC>
  | ClearToDoDataActionType;

export type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;
export type AddTodolistActionType = ReturnType<typeof addTodolistAC>;
export type SetTodolistActionType = ReturnType<typeof setToDoListsAC>;
export type ClearToDoDataActionType = ReturnType<typeof clearToDoDataAC>;

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å action –≤ todolistsReducer
export const REMOVE_TODOLIST = "TODOLISTS/REMOVE-TODOLIST";
export const ADD_TODOLIST = "TODOLISTS/ADD-TODOLIST";
const CHANGE_TODOLIST_TITLE = "TODOLISTS/CHANGE-TODOLIST-TITLE";
const CHANGE_TODOLIST_FILTER = "TODOLISTS/CHANGE-TODOLIST-FILTER";
export const SET_TODOLISTS = "TODOLISTS/SET-TODOLISTS";
const CHANGE_TODOLIST_ENTITY_STATUS = "TODOLISTS/CHANGE-TODOLIST-ENTITY-STATUS";
export const CLEAR_TO_DO_DATA = "TODOLISTS/CLEAR-TO-DO-DATA";

// –¢–∏–ø–∏–∑–∞—Ü–∏—è Filters
export type FilterValuesType = "all" | "active" | "completed";

// –¢–∏–ø–∏–∑–∞—Ü–∏—è Todolists –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Å filter
export type ToDoListDomainType = TodolistType & {
  filter: FilterValuesType;
  entityStatus: RequestStatusType;
};

// *********** –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π state –¥–ª—è todolistsReducer ****************
const initialState: ToDoListDomainType[] = [];

// *********** Reducer - —á–∏—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è state –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è action –æ—Ç dispatch ****************
export const todolistsReducer = (state = initialState, action: ToDoListActionsTypes): ToDoListDomainType[] => {
  switch (action.type) {
    case REMOVE_TODOLIST:
      return state.filter((el) => el.id !== action.payload.toDoListID);
    case ADD_TODOLIST:
      return [
        {
          id: action.payload.todolistId,
          title: action.payload.title,
          filter: "all",
          addedDate: "",
          order: 0,
          entityStatus: "idle"
        },
        ...state
      ];
    case CHANGE_TODOLIST_TITLE:
      return state.map((el) => (el.id === action.payload.toDoListID ? { ...el, title: action.payload.title } : el));
    case CHANGE_TODOLIST_FILTER:
      return state.map((el) => (el.id === action.payload.toDoListID ? { ...el, filter: action.payload.filter } : el));
    case SET_TODOLISTS:
      return action.payload.toDoLists.map((el) => ({ ...el, filter: "all", entityStatus: "idle" }));
    case CHANGE_TODOLIST_ENTITY_STATUS:
      return state.map((el) => (el.id === action.payload.id ? { ...el, entityStatus: action.payload.status } : el));
    case CLEAR_TO_DO_DATA:
      return [];
    default:
      return state;
  }
};

// *********** Action creators - —Å–æ–∑–¥–∞—é—Ç –æ–±—ä–µ–∫—Ç action ****************
export const removeTodolistAC = (toDoListID: string) => {
  return { type: REMOVE_TODOLIST, payload: { toDoListID } } as const;
};
export const addTodolistAC = (title: string, todolistId: string) => {
  return { type: ADD_TODOLIST, payload: { title, todolistId } } as const;
};
export const changeTodolistTitleAC = (toDoListID: string, title: string) => {
  return { type: CHANGE_TODOLIST_TITLE, payload: { toDoListID, title } } as const;
};
export const changeTodolistFilterAC = (toDoListID: string, filter: FilterValuesType) => {
  return { type: CHANGE_TODOLIST_FILTER, payload: { toDoListID, filter } } as const;
};
export const setToDoListsAC = (toDoLists: Array<TodolistType>) => {
  return { type: SET_TODOLISTS, payload: { toDoLists } } as const;
};
export const changeTodolistEntityStatusAC = (id: string, status: RequestStatusType) => {
  return { type: CHANGE_TODOLIST_ENTITY_STATUS, payload: { id, status } } as const;
};
export const clearToDoDataAC = () => {
  return { type: CLEAR_TO_DO_DATA } as const;
};

 */
/*
// *********** Thunk - –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å DAL ****************
// ------------- –ü–æ–ª—É—á–µ–Ω–∏–µ todolist —Å —Å–µ—Ä–≤–µ—Ä–∞ -----------------------
export const getTodoListsTC = () => async (dispatch: AppDispatch) => {
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º Preloader –≤–æ –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞
  dispatch(setAppStatusAC({ status: "loading" }));

  try {
    // –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ todolist —Å —Å–µ—Ä–≤–µ—Ä–∞
    const getTodoListsData = await todolistAPI.getTodolists();

    // –ó–∞–¥–∏—Å–ø–∞—Ç—á–∏–ª–∏ –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
    dispatch(setToDoListsAC({ toDoLists: getTodoListsData }));

    // –ó–∞–¥–∏—Å–ø–∞—Ç—á–∏–ª–∏ tasks —Å —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ todolist
    getTodoListsData.forEach((el) => {
      dispatch(getTasksTC(el.id));
    });

    // –£–±–∏—Ä–∞–µ–º Preloader –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    dispatch(setAppStatusAC({ status: "succeeded" }));
  } catch (error: any) {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ç–µ–≤–æ–π –æ—à–∏–±–∫–∏
    handleServerNetworkError(error, dispatch);
  }
};

 */
/*
// ------------- –ò–∑–º–µ–Ω–µ–Ω–∏–µ todolist's title -----------------------
export const updateTodoListsTC =
    (todolistId: string, title: string) => async (dispatch: AppDispatch, getState: () => AppRootStateType) => {
        // –ü–æ–ª—É—á–∏–ª–∏ –≤—Å–µ todolists –∏–∑ state
        const allTodoListsFromState = getState().toDoLists

        // –ù–∞—à–ª–∏ –Ω—É–∂–Ω—ã–π todolist –ø–æ todolistId
        const todoList = allTodoListsFromState.find((t) => {
            return t.id === todolistId
        })

        // –ü—Ä–æ–≤–µ—Ä–∫–∞, —Ç.–∫ find –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å undefined
        if (todoList) {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º Preloader –≤–æ –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞
            dispatch(setAppStatusAC({status: 'loading'}))

            try {
                // –ó–∞–ø—Ä–æ—Å –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ todolist's title
                const updateTodolistData = await todolistAPI.updateTodolist(todolistId, title)

                // –ï—Å–ª–∏ —É—Å–ø–µ—Ö
                if (updateTodolistData.resultCode === 0) {
                    // –ó–∞–¥–∏—Å–ø–∞—Ç—á–∏–ª–∏ –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –∏ –ø–æ–º–µ–Ω—è–ª–∏ title
                    dispatch(changeTodolistTitleAC({toDoListID: todolistId, title}))

                    // –£–±–∏—Ä–∞–µ–º Preloader –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
                    dispatch(setAppStatusAC({status: 'updated'}))
                } else {
                    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ä–≤–µ—Ä–Ω–æ–π –æ—à–∏–±–∫–∏
                    handleServerNetworkError(updateTodolistData, dispatch)
                }
            } catch (error: any) {
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ç–µ–≤–æ–π –æ—à–∏–±–∫–∏
                handleServerNetworkError(error, dispatch)
            }
        }
    }

 */
/*
// ------------- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ todolist -----------------------
export const addTodoListsTC = (title: string) => async (dispatch: AppDispatch) => {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º Preloader –≤–æ –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞
    dispatch(setAppStatusAC({status: 'loading'}))

    try {
        // –ó–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ todolist
        const addTodoListsData = await todolistAPI.createTodolist(title)

        // –ï—Å–ª–∏ —É—Å–ø–µ—Ö
        if (addTodoListsData.resultCode === 0) {
            // –ó–∞–¥–∏—Å–ø–∞—Ç—á–∏–ª–∏ –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
            dispatch(addTodolistAC({title, toDoListID: addTodoListsData.data.item.id}))

            // –£–±–∏—Ä–∞–µ–º Preloader –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            dispatch(setAppStatusAC({status: 'updated'}))
        } else {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ä–≤–µ—Ä–Ω–æ–π –æ—à–∏–±–∫–∏
            handleServerNetworkError(addTodoListsData, dispatch)
        }
    } catch (error: any) {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ç–µ–≤–æ–π –æ—à–∏–±–∫–∏
        handleServerNetworkError(error, dispatch)
    }
}

 */
/*
// ------------- –£–¥–∞–ª–µ–Ω–∏–µ todolist -----------------------
export const deleteTodoListsTC = (toDoListID: string) => async (dispatch: AppDispatch) => {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º Preloader –≤–æ –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞
    dispatch(setAppStatusAC({status: 'loading'}))
    // –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –≤–æ –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞
    dispatch(changeTodolistEntityStatusAC({toDoListID, entityStatus: 'loading'}))

    try {
        // –ó–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ todolist
        const deleteTodolistData = await todolistAPI.deleteTodolist(toDoListID)

        // –ï—Å–ª–∏ —É—Å–ø–µ—Ö
        if (deleteTodolistData.resultCode === 0) {
            // –ó–∞–¥–∏—Å–ø–∞—Ç—á–∏–ª–∏ –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –∏ —É–¥–∞–ª–∏–ª–∏ todolist
            dispatch(removeTodolistAC({toDoListID}))

            // –£–±–∏—Ä–∞–µ–º Preloader –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            dispatch(setAppStatusAC({status: 'updated'}))
        } else {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ä–≤–µ—Ä–Ω–æ–π –æ—à–∏–±–∫–∏
            handleServerNetworkError(deleteTodolistData, dispatch)
        }
    } catch (error: any) {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ç–µ–≤–æ–π –æ—à–∏–±–∫–∏
        handleServerNetworkError(error, dispatch)
    }
}

 */
