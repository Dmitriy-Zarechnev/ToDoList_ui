import { authAPI, LoginParamsType } from "features/auth/api/auth-api";
import { createAppAsyncThunk, toDoListsActions } from "../../toDoLists/model/toDoLists/todolists-reducer";
import { createSlice, isFulfilled, PayloadAction } from "@reduxjs/toolkit";
import { ResultCode } from "common/api/enums";
import { appActions } from "app/model/app-reducer";


// *********** Reducer - —á–∏—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è state –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è action –æ—Ç dispatch ****************
// slice - reducer —Å–æ–∑–¥–∞–µ–º —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏ createSlice
const slice = createSlice({
  // –≤–∞–∂–Ω–æ —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–ª–æ—Å—å, –±—É–¥–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø—Ä–∏—Å—Ç–∞–≤–∫–∏ —Å–æ–≥–ª–∞—Å–Ω–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—é redux ducks ü¶Ü
  name: "auth",
  initialState: {
    isLoggedIn: false as boolean,
    captchaUrl: "" as string
  },
  // sub-reducers, –∫–∞–∂–¥—ã–π –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–µ–Ω –æ–¥–Ω–æ–º—É –æ–ø–µ—Ä–∞—Ç–æ—Ä—É case –≤ switch, –∫–∞–∫ –º—ã –¥–µ–ª–∞–ª–∏ —Ä–∞–Ω—å—à–µ (–æ–±—ã—á–Ω—ã–π redux)
  reducers: {},
  extraReducers: builder => {
    builder
      .addCase(authThunks.getCaptcha.fulfilled,
        (state, action) => {
          state.captchaUrl = action.payload.captcha;
        })
      .addMatcher(
        isFulfilled(authThunks.logIn, authThunks.logOut, authThunks.initializeMe),
        (state, action: PayloadAction<{ isLoggedIn: boolean }>) => {
          state.isLoggedIn = action.payload.isLoggedIn;
        });
  },
  selectors: {
    selectIsLoggedIn: (sliceState) => sliceState.isLoggedIn,
    selectCaptchaUrl: (sliceState) => sliceState.captchaUrl
  }
});


// *********** Thunk - –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å DAL ****************
// ------------- LogIn –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ -----------------------
const logIn = createAppAsyncThunk<{
  isLoggedIn: boolean
}, LoginParamsType>(
  // 1 - prefix
  `${slice.name}/logIn`,
  // 2 - –ü–µ—Ä–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä - –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∞–Ω–∫–∏, –í—Ç–æ—Ä–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä - thunkAPI
  async (data, { dispatch, rejectWithValue }) => {
    // –ó–∞–ø—Ä–æ—Å –Ω–∞ logIn
    const logInData = await authAPI.logIn(data);

    // –ï—Å–ª–∏ —É—Å–ø–µ—Ö
    if (logInData.resultCode === ResultCode.success) {

      // Return –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ true
      return { isLoggedIn: true };
    } else if (logInData.resultCode === ResultCode.captcha) {

      // –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ captcha
      dispatch(getCaptcha());
      // –≤—ã–±—Ä–æ—Å–∏–ª–∏ –æ—à–∏–±–∫—É
      return rejectWithValue(logInData);
    } else {
      // –ó–¥–µ—Å—å –±—É–¥–µ—Ç —É–ø–∞–∫–æ–≤–∞–Ω–∞ –æ—à–∏–±–∫–∞
      return rejectWithValue(logInData);
    }
  }
);

// ------------- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—Ö–æ–¥–µ -----------------------
const initializeMe = createAppAsyncThunk<{
  isLoggedIn: boolean
}>(
  // 1 - prefix
  `${slice.name}/initializeMe`,
  // 2 - –ü–µ—Ä–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä - –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∞–Ω–∫–∏, –í—Ç–æ—Ä–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä - thunkAPI
  async (_, thunkAPI) => {
    // 3 - –¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    const { dispatch, rejectWithValue } = thunkAPI;

    // –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É
    const meData = await authAPI.me();
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞
    dispatch(appActions.setAppInitialized({ isInitialized: true }));


    // –ï—Å–ª–∏ —É—Å–ø–µ—Ö
    if (meData.resultCode === ResultCode.success) {

      // Return –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ true
      return { isLoggedIn: true };
    } else {
      // –ó–¥–µ—Å—å –±—É–¥–µ—Ç —É–ø–∞–∫–æ–≤–∞–Ω–∞ –æ—à–∏–±–∫–∞
      return rejectWithValue(meData);
    }
  }
);

// ------------- LogOut —Å —Å–µ—Ä–≤–µ—Ä–∞ -----------------------
const logOut = createAppAsyncThunk<{
  isLoggedIn: boolean
}>(
  // 1 - prefix
  `${slice.name}/logOut`,
  // 2 - –ü–µ—Ä–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä - –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∞–Ω–∫–∏, –í—Ç–æ—Ä–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä - thunkAPI
  async (_, thunkAPI) => {
    // 3 - –¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    const { dispatch, rejectWithValue } = thunkAPI;

    // –ó–∞–ø—Ä–æ—Å –Ω–∞ LogOut
    const logOutData = await authAPI.logOut();

    // –ï—Å–ª–∏ —É—Å–ø–µ—Ö
    if (logOutData.resultCode === ResultCode.success) {

      // –£–¥–∞–ª–∏–ª–∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ store –ø–æ—Å–ª–µ –≤—ã–ª–æ–≥–∏–Ω–∏–∑–∞—Ü–∏–∏
      dispatch(toDoListsActions.clearToDoData());

      // Return –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ false
      return { isLoggedIn: false };
    } else {

      // –ó–¥–µ—Å—å –±—É–¥–µ—Ç —É–ø–∞–∫–æ–≤–∞–Ω–∞ –æ—à–∏–±–∫–∞
      return rejectWithValue(logOutData);
    }
  }
);

// ------------- Get captcha -----------------------
const getCaptcha = createAppAsyncThunk<{
  captcha: string
}>(
  // 1 - prefix
  `${slice.name}/getCaptcha`,
  // 2 - –ü–µ—Ä–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä - –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∞–Ω–∫–∏, –í—Ç–æ—Ä–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä - thunkAPI
  async (_) => {

    // –ó–∞–ø—Ä–æ—Å –Ω–∞ getCaptcha
    const captchaData = await authAPI.getCaptcha();

    return { captcha: captchaData.url };
  }
);


// –°–æ–∑–¥–∞–µ–º authReducer —Å –ø–æ–º–æ—â—å—é slice
export const authReducer = slice.reducer;

// Thunks —É–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –≤ –æ–±—ä–µ–∫—Ç
export const authThunks = { logOut, logIn, initializeMe, getCaptcha };

// –£–ø–∞–∫–æ–≤–∞–ª–∏ –≤—Å–µ selectors –≤ –æ–¥–∏–Ω –æ–±—ä–µ–∫—Ç
export const authSelectors = slice.selectors;

// –¢–∏–ø–∏–∑–∞—Ü–∏—è AuthInitialStateType –¥–ª—è —Ç–µ—Å—Ç–æ–≤
export type AuthInitialStateType = ReturnType<typeof slice.getInitialState>
